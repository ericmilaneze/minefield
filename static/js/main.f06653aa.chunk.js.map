{"version":3,"sources":["Minefield/minefield-game/levels.js","Minefield/minefield-game/row.js","Minefield/minefield-game/square.js","Minefield/minefield-game/minefield.js","Minefield/index.js","App.js","index.js"],"names":["levels","name","rows","columns","bombs","bisque","row","minefield","rowIndex","this","squares","square","squareIndexInMinefield","setRow","push","columnIndex","find","s","address","squareIndexInRow","r","length","hasBomb","showingResult","hasFlag","currRow","rowAbove","getRowAbove","rowBelow","getRowBelow","currColumnNumber","leftColumnNumber","rightColumnNumber","neighbors","getSquareFromColumn","filter","n","getNeighbors","getNeighborsWithBombs","isFinished","level","squaresWithBombs","lose","win","hasStarted","qtyFlagsMissing","qtyFieldsToExplore","isEven","forEach","neighbor","show","_distributeBombs","getNumberOfNeighborsWithBombs","explodeSquaresAround","toggleFlag","chosenSquare","currNumberOfBombs","randomNumber","Math","floor","random","candidateSquare","_isNeighborOrSelf","putBomb","currentSquare","i","addSquare","levelName","mf","toLowerCase","_createRow","j","_createSquare","Minefield","useState","game","setGame","version","setVersion","Object","keys","setLevelName","useEffect","newGame","createMinefield","className","onClick","restart","onChange","evt","changeLevel","target","value","map","key","shouldPaintAsEven","squareClick","onContextMenu","preventDefault","squareRightClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f06653aa.chunk.js","sourcesContent":["const levels = {\n    'medium': {\n        name: 'Medium',\n        rows: 20,\n        columns: 10,\n        bombs: 35,\n        bisque: true // lambuja\n    },\n    'easy': {\n        name: 'Easy',\n        rows: 12,\n        columns: 6,\n        bombs: 10,\n        bisque: true // lambuja\n    },\n    'hard': {\n        name: 'Hard',\n        rows: 28,\n        columns: 13,\n        bombs: 75,\n        bisque: true // lambuja\n    }\n}\n\nexport default levels;\n","export default class row {\n    constructor(minefield, rowIndex) {\n        this.minefield = minefield;\n        this.rowIndex = rowIndex;\n        this.squares = [];\n    }\n\n    isEven() {\n        return this.rowIndex % 2 === 0;\n    }\n\n    addSquare(square, squareIndexInMinefield) {\n        square.setRow(this, squareIndexInMinefield);\n        this.squares.push(square);\n    }\n\n    getSquareFromColumn(columnIndex) {\n        return this.squares.find(s => s.address.squareIndexInRow === columnIndex);\n    }\n\n    getRowAbove() {\n        if (this.rowIndex <= 0) {\n            return null;\n        }\n\n        return this.minefield.rows.find(r => r.rowIndex === this.rowIndex - 1);\n    }\n\n    getRowBelow() {\n        if (this.rowIndex >= this.minefield.rows.length - 1) {\n            return null;\n        }\n\n        return this.minefield.rows.find(r => r.rowIndex === this.rowIndex + 1);\n    }\n}\n","export default class square {\n    constructor(row) {\n        this.row = row;\n        this.hasBomb = false;\n        this.showingResult = false;\n        this.hasFlag = false;\n    }\n\n    setRow(row, squareIndexInMinefield) {\n        this.row = row;\n        this.address = {\n            rowIndex: row.rowIndex,\n            squareIndexInRow: row.squares.length,\n            squareIndexInMinefield\n        };\n    }\n\n    getNeighbors() {\n        const currRow = this.row;\n        const rowAbove = this.row.getRowAbove();\n        const rowBelow = this.row.getRowBelow();\n\n        const currColumnNumber = this.address.squareIndexInRow;\n        const leftColumnNumber = currColumnNumber - 1;\n        const rightColumnNumber = currColumnNumber + 1;\n\n        const neighbors = [];\n\n        if (rowAbove) {\n            neighbors.push(rowAbove.getSquareFromColumn(leftColumnNumber));\n            neighbors.push(rowAbove.getSquareFromColumn(currColumnNumber));\n            neighbors.push(rowAbove.getSquareFromColumn(rightColumnNumber));\n        }\n\n        neighbors.push(currRow.getSquareFromColumn(leftColumnNumber));\n        neighbors.push(currRow.getSquareFromColumn(rightColumnNumber));\n\n        if (rowBelow) {\n            neighbors.push(rowBelow.getSquareFromColumn(leftColumnNumber));\n            neighbors.push(rowBelow.getSquareFromColumn(currColumnNumber));\n            neighbors.push(rowBelow.getSquareFromColumn(rightColumnNumber));\n        }\n\n        return neighbors.filter(n => n);\n    }\n\n    getNeighborsWithBombs() {\n        const neighbors = this.getNeighbors();\n\n        return neighbors.filter(n => n.hasBomb);\n    }\n\n    getNumberOfNeighborsWithBombs() {\n        const neighbors = this.getNeighborsWithBombs();\n\n        return neighbors.length;\n    }\n\n    show() {\n        if (!square.hasFlag && !this.showingResult) {\n            this.showingResult = true;\n        }\n    }\n\n    isEven() {\n        return this.address.squareIndexInMinefield % 2 === 0;\n    }\n\n    toggleFlag() {\n        this.hasFlag = !this.hasFlag && !this.showingResult && !this.row.minefield.isFinished;\n    }\n\n    putBomb() {\n        this.hasBomb = true;\n    }\n}\n","import levels from './levels';\nimport row from './row';\nimport square from './square';\n\nexport default class minefield {\n    constructor(level) {\n        this.level = level;\n        this.rows = [];\n        this.squares = [];\n        this.squaresWithBombs = [];\n        this.isFinished = false;\n        this.lose = false;\n        this.win = false;\n        this.hasStarted = false;\n        this.qtyFlagsMissing = level.bombs;\n        this.qtyFieldsToExplore = 0;\n    }\n\n    static createMinefield(levelName) {\n        const level = levels[levelName.toLowerCase()];\n\n        const mf = new minefield(level);\n\n        for (let i = 0; i < mf.level.rows; i++) {\n            const row = mf._createRow(i);\n\n            for (let j = 0; j < mf.level.columns; j++) {\n                mf._createSquare(row);\n            }\n        }\n\n        return mf;\n    }\n\n    shouldPaintAsEven(square) {\n        const isEven = square.isEven();\n        const isNumberOfColumnsEven = this.level.columns % 2 === 0;\n\n        if (isNumberOfColumnsEven && !square.row.isEven()) {\n            return !isEven;\n        }\n\n        return isEven;\n    }\n\n    explodeSquaresAround(square) {\n        const neighbors = square.getNeighbors();\n\n        neighbors.forEach(neighbor => {\n            this.show(neighbor);\n        });\n    }\n\n    show(square) {\n        if (!this.isFinished && !square.hasFlag && !square.showingResult) {\n            if (!this.hasStarted) {\n                this._distributeBombs(square);\n                this.hasStarted = true;\n            }\n\n            square.show();\n\n            if (square.hasBomb) {\n                this.isFinished = true;\n                this.lose = true;\n            } else {\n                this.qtyFieldsToExplore--;\n\n                if (this.qtyFieldsToExplore === 0) {\n                    this.isFinished = true;\n                    this.win = true;\n                }\n            }\n\n            if (square.getNumberOfNeighborsWithBombs() === 0) {\n                this.explodeSquaresAround(square);\n            }\n        }\n    }\n\n    toggleFlag(square) {\n        if (!square.showingResult && !this.isFinished) {\n            square.toggleFlag();\n\n            if (square.hasFlag) {\n                this.qtyFlagsMissing--;\n            } else {\n                this.qtyFlagsMissing++;\n            }\n        }\n    }\n\n    _distributeBombs(chosenSquare) {\n        let currNumberOfBombs = 0;\n\n        while (currNumberOfBombs < this.level.bombs) {\n            const randomNumber = Math.floor(Math.random() * this.squares.length);\n            const candidateSquare = this.squares[randomNumber];\n            \n            if (this.level.bisque && this._isNeighborOrSelf(candidateSquare, chosenSquare)) {\n                continue;\n            }\n            \n            if (!candidateSquare.hasBomb) {\n                candidateSquare.putBomb();\n                this.squaresWithBombs.push(candidateSquare);\n                currNumberOfBombs++;\n                this.qtyFieldsToExplore--;\n            }\n        }\n    }\n\n    _isNeighborOrSelf(currentSquare, chosenSquare) {\n        if (!chosenSquare) {\n            return false;\n        }\n\n        if (currentSquare === chosenSquare) {\n            return true;\n        }\n\n        const neighbors = chosenSquare.getNeighbors();\n\n        for (let i = 0; i < neighbors.length; i++) {\n            if (currentSquare === neighbors[i]) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    _createRow(rowIndex) {\n        const r = new row(this, rowIndex);\n\n        this.rows.push(r);\n\n        return r;\n    }\n\n    _createSquare(row) {\n        const s = new square(row);\n\n        row.addSquare(s, this.squares.length);\n\n        this.squares.push(s);\n        this.qtyFieldsToExplore++;\n\n        return s;\n    }\n};","import React, { useState, useEffect } from 'react';\nimport { FiFlag } from \"react-icons/fi\";\nimport { FaBomb } from \"react-icons/fa\";\n\nimport minefield from './minefield-game/minefield';\nimport levels from './minefield-game/levels';\n\nimport './index.scss';\n\nexport default function Minefield() {\n    const [game, setGame] = useState({});\n    const [version, setVersion] = useState(0);\n    const [levelName, setLevelName] = useState(levels[Object.keys(levels)[0]].name);\n\n    useEffect(() => {\n        const newGame = minefield.createMinefield(levelName);\n        setGame(newGame);\n    }, [levelName]);\n\n    function restart() {\n        const newGame = minefield.createMinefield(levelName);\n        setGame(newGame);\n        setVersion(version + 1);\n    }\n\n    function squareClick(square) {\n        game.show(square);\n        setGame(game);\n        setVersion(version + 1);\n    }\n\n    function squareRightClick(evt, square) {\n        evt.preventDefault();\n        game.toggleFlag(square);\n        setGame(game);\n        setVersion(version + 1);\n    }\n\n    function changeLevel(levelName) {\n        setLevelName(levelName);\n    }\n\n    return (\n        <section className=\"campo-minado\">\n            <div className=\"config\">\n                {game.level &&\n                    <div className=\"row\">\n                        <div>Level: {game.level.name}</div>\n                        <div>Rows: {game.level.rows}</div>\n                        <div>Columns: {game.level.columns}</div>\n                        <div>Bombs: {game.level.bombs}</div>\n                    </div>\n                }\n\n                <div className=\"row\">\n                    <div>Flags: {game.qtyFlagsMissing}</div>\n                    <div>Fields: {game.qtyFieldsToExplore}</div>\n                </div>\n\n                {game.hasStarted &&\n                    <button \n                        className=\"row\"\n                        onClick={() => restart()}>\n                        Restart\n                    </button>\n                }\n\n                <select \n                    className=\"row\"\n                    onChange={(evt) => changeLevel(evt.target.value)}\n                >\n                    {Object.keys(levels).map((level) => (\n                        <option value={level} key={level}>{levels[level].name}</option>\n                    ))}\n                </select>\n\n                <div className=\"row result\">\n                    {game.win && 'You win!'}\n                    {game.lose && 'You lose!'}\n                </div>\n            </div>\n            <div className=\"main\">\n                {game.rows && game.rows.map(row => (\n                    <div \n                        key={row.rowIndex}\n                        className=\"square-row\"\n                    >\n                        {row.squares.map(square => (\n                            <div \n                                key={square.address.squareIndexInMinefield}\n                                className={`\n                                    square \n                                    ${game.shouldPaintAsEven(square) ? 'even' : 'odd'}\n                                    ${square.showingResult ? 'showing' : 'not-showing'}\n                                `}\n                                onClick={() => squareClick(square)}\n                                onContextMenu={evt => squareRightClick(evt, square)}\n                            >\n                                {square.showingResult && !square.hasBomb && square.getNumberOfNeighborsWithBombs() !== 0 && square.getNumberOfNeighborsWithBombs()}\n                                {square.showingResult && square.hasBomb && <FaBomb />}\n                                {square.hasFlag && <FiFlag />}\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n        </section>\n    );\n}\n","import React from 'react';\n\nimport Minefield from \"./Minefield\";\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <section className=\"main-section\">\n      <h1>Minefield</h1>\n\n      <Minefield />\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
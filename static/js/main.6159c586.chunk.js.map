{"version":3,"sources":["Modal/index.js","minefield-game/levels.js","minefield-game/row.js","minefield-game/square.js","minefield-game/minefield.js","Minefield/index.js","App.js","index.js"],"names":["Modal","show","children","createPortal","className","document","body","name","rows","columns","bombs","bisque","row","minefield","rowIndex","this","squares","square","squareIndexInMinefield","setRow","push","columnIndex","find","s","address","squareIndexInRow","r","length","hasBomb","showingResult","hasFlag","currRow","rowAbove","getRowAbove","rowBelow","getRowBelow","currColumnNumber","leftColumnNumber","rightColumnNumber","neighbors","getSquareFromColumn","filter","n","getNeighbors","getNeighborsWithBombs","isFinished","level","squaresWithBombs","lose","win","hasStarted","qtyFlagsMissing","qtyFieldsToExplore","isEven","forEach","neighbor","_distributeBombs","getNumberOfNeighborsWithBombs","explodeSquaresAround","toggleFlag","chosenSquare","currNumberOfBombs","randomNumber","Math","floor","random","candidateSquare","_isNeighborOrSelf","putBomb","currentSquare","i","addSquare","levelName","mf","levels","x","_createRow","j","_createSquare","Minefield","useState","game","setGame","version","setVersion","setLevelName","restart","newGame","createMinefield","useEffect","onClick","onChange","evt","changeLevel","target","value","map","key","shouldPaintAsEven","toLowerCase","squareClick","onContextMenu","preventDefault","squareRightClick","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6159c586.chunk.js","sourcesContent":["import React from 'react';\nimport { createPortal } from 'react-dom';\n\nimport './index.scss';\n\nexport default function Modal({ show, children }) {\n    return (\n        <>\n            {createPortal(\n                <div \n                    className={`\n                        modal\n                        ${show ? 'showing' : ''}\n                    `}\n                >\n                    <div \n                        className={`\n                            modal-content\n                            ${show ? 'showing' : ''}\n                        `}\n                    >\n                        {children}\n                    </div>\n                </div>,\n                document.body)\n            }\n        </>\n    );\n}\n","export default [\n    {\n        name: 'Medium',\n        rows: 20,\n        columns: 10,\n        bombs: 35,\n        bisque: true // lambuja\n    },\n    {\n        name: 'Easy',\n        rows: 12,\n        columns: 6,\n        bombs: 10,\n        bisque: true // lambuja\n    },\n    {\n        name: 'Hard',\n        rows: 28,\n        columns: 13,\n        bombs: 75,\n        bisque: true // lambuja\n    }\n];\n","export default class row {\n    constructor(minefield, rowIndex) {\n        this.minefield = minefield;\n        this.rowIndex = rowIndex;\n        this.squares = [];\n    }\n\n    isEven() {\n        return this.rowIndex % 2 === 0;\n    }\n\n    addSquare(square, squareIndexInMinefield) {\n        square.setRow(this, squareIndexInMinefield);\n        this.squares.push(square);\n    }\n\n    getSquareFromColumn(columnIndex) {\n        return this.squares.find(s => s.address.squareIndexInRow === columnIndex);\n    }\n\n    getRowAbove() {\n        if (this.rowIndex <= 0) {\n            return null;\n        }\n\n        return this.minefield.rows.find(r => r.rowIndex === this.rowIndex - 1);\n    }\n\n    getRowBelow() {\n        if (this.rowIndex >= this.minefield.rows.length - 1) {\n            return null;\n        }\n\n        return this.minefield.rows.find(r => r.rowIndex === this.rowIndex + 1);\n    }\n}\n","export default class square {\n    constructor(row) {\n        this.row = row;\n        this.hasBomb = false;\n        this.showingResult = false;\n        this.hasFlag = false;\n    }\n\n    setRow(row, squareIndexInMinefield) {\n        this.row = row;\n        this.address = {\n            rowIndex: row.rowIndex,\n            squareIndexInRow: row.squares.length,\n            squareIndexInMinefield\n        };\n    }\n\n    getNeighbors() {\n        const currRow = this.row;\n        const rowAbove = this.row.getRowAbove();\n        const rowBelow = this.row.getRowBelow();\n\n        const currColumnNumber = this.address.squareIndexInRow;\n        const leftColumnNumber = currColumnNumber - 1;\n        const rightColumnNumber = currColumnNumber + 1;\n\n        const neighbors = [];\n\n        if (rowAbove) {\n            neighbors.push(rowAbove.getSquareFromColumn(leftColumnNumber));\n            neighbors.push(rowAbove.getSquareFromColumn(currColumnNumber));\n            neighbors.push(rowAbove.getSquareFromColumn(rightColumnNumber));\n        }\n\n        neighbors.push(currRow.getSquareFromColumn(leftColumnNumber));\n        neighbors.push(currRow.getSquareFromColumn(rightColumnNumber));\n\n        if (rowBelow) {\n            neighbors.push(rowBelow.getSquareFromColumn(leftColumnNumber));\n            neighbors.push(rowBelow.getSquareFromColumn(currColumnNumber));\n            neighbors.push(rowBelow.getSquareFromColumn(rightColumnNumber));\n        }\n\n        return neighbors.filter(n => n);\n    }\n\n    getNeighborsWithBombs() {\n        const neighbors = this.getNeighbors();\n\n        return neighbors.filter(n => n.hasBomb);\n    }\n\n    getNumberOfNeighborsWithBombs() {\n        const neighbors = this.getNeighborsWithBombs();\n\n        return neighbors.length;\n    }\n\n    show() {\n        if (!square.hasFlag && !this.showingResult) {\n            this.showingResult = true;\n        }\n    }\n\n    isEven() {\n        return this.address.squareIndexInMinefield % 2 === 0;\n    }\n\n    toggleFlag() {\n        this.hasFlag = !this.hasFlag && !this.showingResult && !this.row.minefield.isFinished;\n    }\n\n    putBomb() {\n        this.hasBomb = true;\n    }\n}\n","import levels from './levels';\nimport row from './row';\nimport square from './square';\n\nexport default class minefield {\n    constructor(level) {\n        this.level = level;\n        this.rows = [];\n        this.squares = [];\n        this.squaresWithBombs = [];\n        this.isFinished = false;\n        this.lose = false;\n        this.win = false;\n        this.hasStarted = false;\n        this.qtyFlagsMissing = level.bombs;\n        this.qtyFieldsToExplore = 0;\n    }\n\n    static createMinefield(levelName) {\n        const level = levels.find(x => x.name === levelName);\n\n        const mf = new minefield(level);\n\n        for (let i = 0; i < mf.level.rows; i++) {\n            const row = mf._createRow(i);\n\n            for (let j = 0; j < mf.level.columns; j++) {\n                mf._createSquare(row);\n            }\n        }\n\n        return mf;\n    }\n\n    shouldPaintAsEven(square) {\n        const isEven = square.isEven();\n        const isNumberOfColumnsEven = this.level.columns % 2 === 0;\n\n        if (isNumberOfColumnsEven && !square.row.isEven()) {\n            return !isEven;\n        }\n\n        return isEven;\n    }\n\n    explodeSquaresAround(square) {\n        const neighbors = square.getNeighbors();\n\n        neighbors.forEach(neighbor => {\n            this.show(neighbor);\n        });\n    }\n\n    show(square) {\n        if (!this.isFinished && !square.hasFlag && !square.showingResult) {\n            if (!this.hasStarted) {\n                this._distributeBombs(square);\n                this.hasStarted = true;\n            }\n\n            square.show();\n\n            if (square.hasBomb) {\n                this.isFinished = true;\n                this.lose = true;\n            } else {\n                this.qtyFieldsToExplore--;\n\n                if (this.qtyFieldsToExplore === 0) {\n                    this.isFinished = true;\n                    this.win = true;\n                }\n            }\n\n            if (square.getNumberOfNeighborsWithBombs() === 0) {\n                this.explodeSquaresAround(square);\n            }\n        }\n    }\n\n    toggleFlag(square) {\n        if (!square.showingResult && !this.isFinished) {\n            square.toggleFlag();\n\n            if (square.hasFlag) {\n                this.qtyFlagsMissing--;\n            } else {\n                this.qtyFlagsMissing++;\n            }\n        }\n    }\n\n    _distributeBombs(chosenSquare) {\n        let currNumberOfBombs = 0;\n\n        while (currNumberOfBombs < this.level.bombs) {\n            const randomNumber = Math.floor(Math.random() * this.squares.length);\n            const candidateSquare = this.squares[randomNumber];\n            \n            if (this.level.bisque && this._isNeighborOrSelf(candidateSquare, chosenSquare)) {\n                continue;\n            }\n            \n            if (!candidateSquare.hasBomb) {\n                candidateSquare.putBomb();\n                this.squaresWithBombs.push(candidateSquare);\n                currNumberOfBombs++;\n                this.qtyFieldsToExplore--;\n            }\n        }\n    }\n\n    _isNeighborOrSelf(currentSquare, chosenSquare) {\n        if (!chosenSquare) {\n            return false;\n        }\n\n        if (currentSquare === chosenSquare) {\n            return true;\n        }\n\n        const neighbors = chosenSquare.getNeighbors();\n\n        for (let i = 0; i < neighbors.length; i++) {\n            if (currentSquare === neighbors[i]) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    _createRow(rowIndex) {\n        const r = new row(this, rowIndex);\n\n        this.rows.push(r);\n\n        return r;\n    }\n\n    _createSquare(row) {\n        const s = new square(row);\n\n        row.addSquare(s, this.squares.length);\n\n        this.squares.push(s);\n        this.qtyFieldsToExplore++;\n\n        return s;\n    }\n};","import React, { useState, useEffect } from 'react';\nimport { FiFlag } from \"react-icons/fi\";\nimport { FaBomb } from \"react-icons/fa\";\nimport { MdCached } from 'react-icons/md';\n\nimport Modal from '../Modal';\n\nimport minefield from '../minefield-game/minefield';\nimport levels from '../minefield-game/levels';\n\nimport './index.scss';\n\nexport default function Minefield() {\n    const [game, setGame] = useState({});\n    const [version, setVersion] = useState(0);\n    const [levelName, setLevelName] = useState(levels[0].name);\n\n    useEffect(() => {\n        const newGame = minefield.createMinefield(levelName);\n        setGame(newGame);\n    }, [levelName]);\n\n    function restart() {\n        const newGame = minefield.createMinefield(levelName);\n        setGame(newGame);\n        setVersion(version + 1);\n    }\n\n    function squareClick(square) {\n        game.show(square);\n        setGame(game);\n        setVersion(version + 1);\n    }\n\n    function squareRightClick(evt, square) {\n        evt.preventDefault();\n        game.toggleFlag(square);\n        setGame(game);\n        setVersion(version + 1);\n    }\n\n    function changeLevel(levelName) {\n        setLevelName(levelName);\n    }\n\n    return (\n        <section className=\"campo-minado\">\n            <Modal show={game.win}>\n                <div className=\"modal-endgame win\">\n                    <p>You win!</p>\n                    <div className=\"refresh\">\n                        <button\n                            onClick={restart}\n                        >\n                            <MdCached />\n                        </button>\n                    </div>\n                </div>\n            </Modal>\n            <Modal show={game.lose}>\n                <div className=\"modal-endgame lose\">\n                    <p>You lose!</p>\n                    <div className=\"refresh\">\n                        <button\n                            onClick={restart}\n                        >\n                            <MdCached />\n                        </button>\n                    </div>\n                </div>\n            </Modal>\n\n            <div className=\"game\">\n                <div className=\"config\">\n                    <div>\n                        <div className=\"flag\"><FiFlag /> {game.qtyFlagsMissing}</div>\n\n                        <select \n                            onChange={(evt) => changeLevel(evt.target.value)}\n                        >\n                            {levels.map((level) => (\n                                <option value={level.name} key={level.name}>{level.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                </div>\n                <div className=\"main\">\n                    {game.rows && game.rows.map(row => (\n                        <div \n                            key={row.rowIndex}\n                            className=\"square-row\"\n                        >\n                            {row.squares.map(square => (\n                                <div \n                                    key={square.address.squareIndexInMinefield}\n                                    className={`\n                                        square \n                                        ${game.shouldPaintAsEven(square) ? 'even' : 'odd'}\n                                        ${square.showingResult ? 'showing' : 'not-showing'}\n                                        ${levelName && levelName.toLowerCase()}\n                                    `}\n                                    onClick={() => squareClick(square)}\n                                    onContextMenu={evt => squareRightClick(evt, square)}\n                                >\n                                    {square.showingResult && !square.hasBomb && square.getNumberOfNeighborsWithBombs() !== 0 && square.getNumberOfNeighborsWithBombs()}\n                                    {square.showingResult && square.hasBomb && <FaBomb />}\n                                    {square.hasFlag && <FiFlag />}\n                                </div>\n                            ))}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </section>\n    );\n}\n","import React from 'react';\n\nimport Minefield from \"./Minefield\";\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <section className=\"main-section\">\n      <Minefield />\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}